{"version":3,"sources":["Components/Context.js","Components/Message.js","Components/Forecast.js","Components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","loading","setLoading","input","setInput","data","setData","coords","setCoords","error","setError","heading","setHeading","weathercolor","setWeatherColor","setWhetherColor","value","one","two","handleSubmit","e","a","preventDefault","fetch","response","json","cod","weather","main","status","message","console","log","window","addEventListener","navigator","geolocation","getCurrentPosition","position","latitude","longitude","fetchData","object","useEffect","Provider","handleInput","target","useGlobalContext","useContext","Message","className","Forecast","important","sys","visibility","speed","wind","feels_like","humidity","pressure","temp","temp_max","temp_min","sunrise","sunset","description","icon","sunrise_hour","Date","getHours","sunrise_minute","getMinutes","sunset_hour","sunset_minute","style","backgroundImage","Math","round","src","alt","Search","action","onSubmit","placeholder","onChange","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b241891.chunk.js","sourcesContent":["import React,{ useContext, useState ,useEffect} from \"react\"\r\nconst AppContext = React.createContext()\r\n\r\nconst AppProvider = ({children})=>{\r\n    const [loading,setLoading] = useState(true)\r\n    const [input,setInput] = useState(\"\")\r\n    const [data,setData] = useState(null)\r\n    const [coords,setCoords] = useState(null)\r\n    const [error,setError] = useState(null)\r\n    const [heading,setHeading] = useState(\"\")\r\n    const [weathercolor,setWeatherColor] = useState(\"\")\r\n    function setWhetherColor(value)\r\n        {\r\n            switch(value)\r\n            {\r\n                case \"Mist\":\r\n                case \"Dust\":\r\n                case \"Fog\":\r\n                case \"Sand\":\r\n                case \"Ash\":\r\n                case \"Squall\":\r\n                case \"Tornado\":\r\n                case \"Haze\":\r\n                    setWeatherColor({one:\"rgb(88, 85, 66)\",two:\"rgb(161, 142, 90)\"});\r\n                    break;\r\n                case \"Rain\":\r\n                    setWeatherColor({one:\"rgb(26, 53, 83)\",two:\"rgb(57, 76, 116)\"});\r\n                    break;\r\n                case \"Clouds\":\r\n                        setWeatherColor({one:\"rgb(116, 126, 158)\",two:\"rgb(122, 145, 175)\"});\r\n                        break;\r\n                case \"Clear\": \r\n                        setWeatherColor({one:\"rgb(77, 88, 255)\",two:\"rgb(214, 237, 255)\"});\r\n                        break;\r\n                case \"Smoke\":\r\n                        setWeatherColor({one:\"rgb(49, 49, 49)\",two:\"rgb(48, 48, 48)\"});\r\n                        break;\r\n                case \"Thunderstorm\":\r\n                    setWeatherColor({one:\"rgb(41, 44, 71)\",two:\"rgb(65, 20, 66)\"});\r\n                    break;\r\n                case \"Drizzle\":\r\n                    setWeatherColor({one:\"rgb(179, 255, 245)\",two:\"rgb(52, 51, 92)\"});\r\n                    break;\r\n                case \"Snow\":\r\n                    setWeatherColor({one:\"rgb(240, 240, 240)\",two:\"rgb(146, 146, 146)\"});\r\n                    break;\r\n                default:\r\n                    setWeatherColor({one:\"rgb(0, 17, 19)\",two:\"rgb(0, 17, 19)\"})\r\n            }\r\n\r\n        }\r\n    const handleSubmit = async (e)=>{\r\n        try\r\n        {\r\n            e.preventDefault()\r\n            setLoading(true)\r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${input}&appid=5d2aba5a660006ca5936ff57f5905f9e`)\r\n            const data = await response.json()\r\n            if(data.cod == 200)\r\n            {\r\n                setError(\"\")\r\n                setData(data)\r\n                 const weatherDescription = data.weather[0].main\r\n                 setWhetherColor(weatherDescription);\r\n                setLoading(false)\r\n                setHeading(`${input} whether forecast`)\r\n                setInput(\"\")\r\n            }\r\n            else \r\n            {\r\n                setError({status:data.cod,message:data.message})\r\n                setInput(\"\")\r\n                setLoading(false)\r\n            }\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error)\r\n        }\r\n    }\r\n    const handleInput = (e)=>{\r\n        setInput(e.target.value)\r\n    }\r\n    const getCoordinates = ()=>{\r\n        if(navigator.geolocation)\r\n        {\r\n        navigator.geolocation.getCurrentPosition(function(position){\r\n            setCoords({latitude:position.coords.latitude,longitude:position.coords.longitude})\r\n        })\r\n        }\r\n        else {\r\n            setError({message:\"Geolocation is not supported by this browser\"})\r\n            setLoading(false)\r\n        }\r\n    }\r\n    window.addEventListener(\"load\",getCoordinates)\r\n    const fetchData = async (object)=>{\r\n        try\r\n        {\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${object.latitude}&lon=${object.longitude}&appid=5d2aba5a660006ca5936ff57f5905f9e`)\r\n        const data = await response.json()\r\n            setData(data)\r\n            const weatherDescription = data.weather[0].main\r\n            setWhetherColor(weatherDescription);\r\n            setLoading(false)\r\n        }\r\n        catch(error)\r\n        {\r\n        console.error(error)\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if(coords)\r\n        {\r\n        fetchData(coords)\r\n        }\r\n    },[coords])\r\n    return (\r\n        <AppContext.Provider value = {{\r\n            loading,\r\n            data,\r\n            input,\r\n            error,\r\n            heading,\r\n            handleInput,\r\n            handleSubmit,\r\n            weathercolor\r\n            }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nconst useGlobalContext = ()=>{\r\n    return useContext(AppContext)\r\n}\r\nexport {useGlobalContext,AppProvider};","import {useGlobalContext} from \"./Context\"\r\nconst Message = ()=>{\r\n    const {error} = useGlobalContext()\r\n    return (\r\n        <div className = \"error\">\r\n            {error.status && <h1>{error.status}</h1>}\r\n            <p>{error.message}</p>\r\n        </div>\r\n    )\r\n    }\r\nexport default Message;","import React from \"react\"\r\nimport { useGlobalContext } from \"./Context\";\r\nimport Message from \"./Message\";\r\nconst Forecast = ()=>{\r\n    console.log(\"forecast render\")\r\n    const {loading,data,error,heading,weathercolor} = useGlobalContext()\r\n    if(loading)\r\n    {\r\n        return (\r\n            <section className = \"loading-container\">\r\n                <div className = \"loading\">\r\n\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n    else if(error)\r\n    {\r\n        return  <Message/>\r\n    }\r\n    else\r\n    {\r\n        const {main:important,sys,visibility,weather,wind:{speed}} = data\r\n        const {feels_like,humidity,pressure,temp,temp_max,temp_min} = important\r\n        const {sunrise,sunset} = sys\r\n        const [{description,icon,main}] = weather\r\n        //kelvin-273.15 = oC\r\n        //new Date(unix*1000).getHour() and getMinutes()\r\n        //m/s - miles/sec - 1m/s  = 2.237 miles\r\n        //1hpa - 1mbar \r\n        let sunrise_hour = new Date(sunrise*1000).getHours()\r\n        const sunrise_minute = new Date(sunrise*1000).getMinutes() \r\n        let sunset_hour = new Date(sunset*1000).getHours()\r\n        const sunset_minute = new Date(sunset*1000).getMinutes()\r\n        if(sunrise_hour > 12)\r\n        {\r\n            sunrise_hour = sunrise_hour - 12;\r\n        }  \r\n        if(sunset_hour > 12)\r\n        {\r\n            sunset_hour = sunset_hour -12;\r\n        }\r\n        return (\r\n            <>\r\n            {!error && <h1 className = \"heading\">{heading}</h1>}\r\n            <div className = \"forecast-container\">\r\n                <section>\r\n                    <article style = {{backgroundImage:`linear-gradient(to right,${weathercolor.one},${weathercolor.two})`}}>\r\n                        <div className = \"upper-grid\">\r\n                            <p>{Math.round(temp-273.15)}<sup><span>&deg;C</span></sup></p>\r\n                            <img src = {`https://openweathermap.org/img/w/${icon}.png`}alt = \"whether-icon\"/>\r\n                        </div>\r\n                        <p className = \"desc\">{description}</p>\r\n                        <div className = \"max-min-container\">\r\n                            <h4>Min {Math.round(temp_min-273.15)}&deg;</h4>\r\n                            <h4>Max {Math.round(temp_max-273.15)}&deg;</h4>\r\n                        </div>\r\n                    </article>\r\n                    <article>\r\n                        <img src = \"images/shirt.png\" alt = \"feels_like\"/>\r\n                        <p>{Math.round(feels_like-273.15)}&deg;</p>\r\n                        <p>Feels Like</p>\r\n                    </article>\r\n                    <article>\r\n                        <img src = \"images/compass.png\" alt = \"wind\"/>\r\n                        <p>{Math.round(speed*3.16)}<sup>kmph</sup></p>\r\n                        <p>Wind</p>\r\n                    </article>\r\n                    <article>\r\n                        <img src = \"images/sunrise.png\" alt = \"sunrise\"/>\r\n                        <p>sunrise at</p>\r\n                        <p>{sunrise_hour} : {sunrise_minute} AM</p>\r\n                    </article>\r\n                    <article>\r\n                        <img src = \"images/sunset.png\" alt = \"sunset\"/>\r\n                        <p>sunset at</p>\r\n                        <p>{sunset_hour} : {sunset_minute} PM</p>\r\n                    </article>\r\n                    <article>\r\n                        <img src = \"images/thermometer.png\" alt = \"pressure\"/>\r\n                        <p>{pressure}<sup>mbar</sup></p>\r\n                        <p>Pressure</p>\r\n                    </article>\r\n                    <article>\r\n                        <img src = \"images/humidity.png\" alt = \"humidity\"/>\r\n                        <p>{humidity}%</p>\r\n                        <p>humidity</p>\r\n                    </article>\r\n                    <article>\r\n                        <img src = \"images/car.png\" alt = \"visibility\"/>\r\n                        <p>{Math.round(visibility/1609.344)}<sup>miles</sup></p>\r\n                        <p>Visibility</p>\r\n                    </article>\r\n                </section>\r\n            </div>\r\n            </>\r\n    )  \r\n    } \r\n}\r\nexport default Forecast;","import { useGlobalContext } from \"./Context\"\r\nconst Search = ()=>{\r\n    const {handleSubmit,handleInput,input} = useGlobalContext()\r\n    console.log(\"serach render\")\r\n    return (\r\n        <section className = \"form-container\">\r\n            <form action = \"#\" onSubmit = {handleSubmit}>\r\n                <input placeholder = \"Enter a city name\" value = {input} onChange = {(e)=>handleInput(e)} type = \"text\"/>\r\n                <button type = \"submit\">Search</button>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\nexport default Search;","import \"./style/style.css\"\nimport Forecast from './Components/Forecast';\nimport Search from './Components/Search';\nfunction App() {\n  return (\n      <main>\n        <Search/>\n        <Forecast/>\n      </main>\n  )\n} \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {AppProvider} from \"./Components/Context\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n    <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}